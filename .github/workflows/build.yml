name: Run Bundlers Spec-Tests

# Allow one concurrent
concurrency:
  group: "uniq"
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Debug'
        required: false
        type: boolean
      ymlFilter:
        description: 'Filter bundler yml files'
        type: string
        required: false

      pytest-args:
        description: 'Extra pytest args'
        type: string
        default: -k gasp
        required: false

  push:
    branches: '**'

  # pull_request:
  #   types: [opened, reopened, synchronize]

  # Allows external webhook trigger
  repository_dispatch:
    types:
      - webhook

jobs:

  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      bundlers:  ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
      - id: create-matrix
        run: |
          bundlers=`ls bundlers/*/*.yml | grep ${{inputs.ymlFilter}}.`
          # make each yml file into a json object in the array array:
          # [ {"bundler":"aabundler", "path":"bundlers/aabundler/aabundler.yml"} ]
          matrix=`echo $bundlers | perl -pe 's/(\S*?\/(\S*?)\/\S*)/{"path":"$1","bundler":"$2"}\n/g' | jq -sc`
          echo matrix=$matrix | tee $GITHUB_OUTPUT

  bundler-tests:
    name: "[ ${{matrix.bundler}} ]"
    # needs: create-matrix
    strategy:
      matrix: 
        include: [{"path":"bundlers/aabundler/aabundler.yml","bundler":"aabundler"},{"path":"bundlers/okbund/okbund.yml","bundler":"okbund"}]
          # ${{ fromJson(needs.create-matrix.outputs.matrix) }}

    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
        with:
          show-progress: false

      - id: runtest
        name: Runtest: ${{ matrix.bundler }}
        run: |
          pytestArgs=${{inputs.pytest-args}}
          echo pytest-args=${pytestArgs:=-k gasp}
          mkdir ./build
          base=./build/${{matrix.bundler}}
          OUTFOLDER=./build ./runbundler/runbundler.sh ${{ matrix.path }} test $pytestArgs | tee $base.txt
          ./runbundler/runbundler.sh ${{matrix.path}} logs > $base.log
          jsonfile=build/*.json
          echo jsonfile=$jsonfile
          echo -n "testresults=`jq -c . < $jsonfile`" >> "$GITHUB_OUTPUT"
          jqsummary='.testsuites.testsuite|{"@name","@tests","@errors","@failures","@skipped","@time"}'
          echo "testsummary=`jq -c \'$jqsummary\' < $jsonfile`" | tee $GITHUB_OUTPUT

      - uses: cloudposse/github-action-matrix-outputs-write@v1
        id: matrix-output
        with:
          matrix-step-name: bundler-tests
          matrix-key: bundler
          outputs: |-
            testresults: ${{steps.runtest.outputs.testresults}}
            testsummary: ${{steps.runtest.outputs.testsummary}}

      - name: Push build output to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: runtest-${{matrix.bundler}}
          path: ./build/

  summary:
    runs-on: ubuntu-latest
    needs: [bundler-tests]
    if: ${{always()}}
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@v1
        id: read
        with:
          matrix-step-name: bundler-tests
      - name: dump
        run: echo '${{steps.read.outputs.result}}' | jq
    # outputs:
    #     result: "${{ toJSON(steps.read.outputs) }}"

